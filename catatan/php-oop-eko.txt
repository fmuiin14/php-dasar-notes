Eko Kurniawan Khennedy
Teknikal Arsitek di salah satu perusahaan terbesar di Indonesia
pengalaman >= 10tahun

Pengenalan OOP
	OOP merupakan sudut pandang bahasa pemrograman yg berkonsep objek
	Ada beberapa istilah yg perlu dimengerti, yaitu Objek dan Class
	
	Apa Itu Objek?
		Adalah data yg berisi field/properties/attributes dan method/function/behavior
		
	Apa Itu Class?
		Adalah blueprint, prototype atau cetakan untuk membuat Objek
		Berisikan deklarasi semua properties dan functions yg dimiliki oleh objek
		Setiap objek selalu dibuat dari class
		Sebuah class bisa membuat objek tanpa batas
	Dari class, baru bisa buat objek
	
	Class dan Object
		class Car, objeknya avanza, almaz, mobilio
		class person, objek eko, joko, budi
		
Class
	Untuk membuat class, kita bisa menggunakan kata kunci class
	Biasanya nama class adalah format CamelCase, dan tidak boleh spasi
	
Object
	Merupakan hasil instansiasi dari class
	Untuk membuat object, kita bisa menggunakan kata kunci new, dan diikuti dengan nama Class dan ()
	
Properties
	Fields/ Properties/ Attributes adalah data yg bisa kita sisipkan di dalam Object
	Sebelum kita bisa memasukkan data di fields, kita harus mendeklarasikan data apa aja yg dimiliki objek tsb didalam deklarasi classnya
	Membuat field sama seperti membuat variable, namun ditempatkan di block class, dan diawali dengan kata kunci var
	
	Manipulasi Properties
		Field yg ada di objek bisa kita manipulasi
		Untuk mengakses field, kita perlu kata kunci -> setelah nama object dan diikuti nama fieldsnya.
		
	Properties Type Declaration
		Sama seperti di function, kita juga bisa membuat type declaration di properties
		Ini membuat PHP otomatis cek tipe data yg sesuai dengan type declaration yg telah ditentukan
		Jika kita mencoba mengubah properties dengan type yg berbeda, maka otomatis akan error. Dan PHP memiliki fitur Type Juggling,
		secara otomatis bisa konversi tipe data lain
		Untuk menambahkan type declaration, kita bisa tambahkan setelah kata kunci var di properties
		
	Default Properties Value
		Ini mirip seperti default value, jadi jika tidak diubah di objek, maka properties akan memiliki value tsb
		
	Nullable Properties
		Saat kita menambah type declaration di properties atau di function argument, maka secara otomatis kita tidak bisa mengirim data
		null ke dalam properties atau function argument tsb.
		Di PHP 7.4 dikenalkan nullable type, jadi kita bisa mengirim data null ke properties/ function arguments
		Caranya sebelum type declaration kita bisa tambahkan tanda ?
		
Function
	Selain menambahkan properties, kita juga bisa menambahkan function ke object
	Caranya dengan mendeklarasikan function tsb di dalam block class
	Sama seperti function biasanya, kita juga bisa menambahkan return value dan parameter
	Untuk mengakses function tsb, kita bisa menggunakan -> dan diikuti dengan nama methodnya. Sama seperti akses properties
	
This Keyword
	Saat kita membuat kode di dalam function di dalam class, kita bisa menggunakan kata kunci this untuk mengakses object saat ini
	Misal kadang kita butuh mengakses properties atau function lain di class yg sama
	
Constant
	Properties di class bisa diubah, mirip variable
	di Class, kita juga bisa membuat Constant, data yg tidak bisa diubah
	Sejak php7.4 kita bisa menggunakan kata kunci const untuk membuat constant, mirip seperti variable namun tidak mengunakan $
	Mengakses CONSTANT
		require_once, lalu panggil NamaClass::NAMAKONSTANT
		
Self Keyword
	Properties vs Constant
		-Saat kita membuat object, properties yg terdapat di class akan secara otomatis dibuat per object. 
		maka untuk mengakses properties, kita perlu menggunakan object, atau jika dari dalam object tersebut, kita perlu menggunakan
		kata kunci this
		-Berbeda, constant di class tidak akan dibuat per object. Constant itu hidupnya di class, bukan di object. jadi perlu akses
			NamaClass::NAMA_CONSTANT
		-Secara sederhana, properties akan dibuat satu per instance class (object), sedangkan constant dibuat satu per class
		
	Self Keyword
		-Jika di dalam class (misal di function) kita ingin mengakses constant, kita perlu mengakses menggunakan NamaClass::NAMA_CONSTANT
		-Namun jika di dalam class yg sama, kita bisa menggunakan kata kunci self untuk mempermudah
	This untuk mengakses object saat ini, kalo self untuk mengakses class saat ini
	
Constructor
	Saat kita membuat Object, maka kita seperti memanggil sebuah function, karena kita menggunakan kurung ()
	Di dalam class PHP, kita bisa membuat constructor, merupakan function yg akan dipanggil saat pertama kali Object dibuat
	Mirip seperti di function, kita bisa memberi parameter pada constructor
	Nama constructor di PHP haruslah __construct()
	Construct adalah function yg dipanggil ketika membuat object
	
Destructor
	Jika constructor adalah function yg akan dipanggil ketika object dibuat,
	Destructor merupakan function yg akan dipanggil ketika object dihapus dari memori
	Untuk membuatnya, kita bisa menggunakan __destruct()
	Khusus destructor, kita tidak boleh menambahkan function argument
	Dalam penggunaan sehari-hari, ini cocok untuk menutup koneksi ke database atau menutup proses menulis ke file, sehingga tidak terjadi
	memori leak
	
Inheritance
	Merupakan kemampuan untuk menurunkan sebuah class ke class lain, dengan artian kita bisa membuat class Parent dan Child
	Child hanya memiliki 1 parent, namun Parent bisa memiliki banyak Child
	Saat sebuah class diturunkan, maka semua properties dan function yg ada di class Parent secara otomatis akan dimiliki oleh class Child
	Untuk melakukan pewarisan, kita harus menggunakan kata kunci extends lalu diikuti dengan nama class parentnya
	
Namespace
	Saat membuat aplikasi, kita akan membuat banyak sekali class
	Jika terlalu banyak, kadang menyulitkan kita untuk mencari class
	PHP memiliki fitur namanya namespace, dimana kita bisa menyimpan class kita di dalam namespace
	Namespace bisa nested, dan jika kita ingin mengakses class yg ada di namespace, kita perlu menyebutkan nama namespacenya
	Namespace bagus ketika kita punya beberapa class yg sama, dengan menggunakan namespace nama class sama tidak akan membuat php error
Membuat namespace
	pakai kata kunci namespace, jika sub nemspace pakai \ setelah namespace sebelumnya
Function dan Constant di namespace
	Jika kita ingin menggunakan function atau constant tsb, kita bisa menggunakannya dengan diawali dengan nama namespace nya
Global namespace
	Secara default, saat kita membuat kode PHP, maka akan disimpan di Global namespace.
	Ini adalah namespace yg tidak memiliki nama namespace
	
Import
	use Keyboard
		Untuk menggunakan class, function atau constant di namespace, kita perlu menyebutkan nama namespacenya di awal
		jika terlalu sering menggunakan class, maka akan terlalu banyak duplikasi dengan menyebut namespace berkali-kali
		Hal ini bisa kita hindari dengan cara mengimport class, function, atau constant tsb dengan menggunakan kata kunci use
		
	Alias
		Saat kita menggunakan use, artinya kita tidak lagi perlu menggunakan nama namespace diawal class ketika kita membuat class tsb
		Jika kita ingin membuat nama classnya sama, maka bisa menggunakan alias
		Alias adalah kemampuan membuat nama lain dari class, function, atau constant yg ada.
		Kita bisa menggunakan kata kunci as setelah melakukan use
		
	Group use Declaration
		Kita bisa mengimport beberapa class, function atau constant dalam satu perintah use
		Untuk melakukan itu, kita perlu {}
		
Visibility
	Atau Mofifier adalah kemampuan properties, function dan construct dapat diakses dari mana saja
	Secara default, properties, function dan constant yg kita buat di dalam class bisa diakses dr mana saja, atau artinya dia public
	Selain public, masih ada visibility lainnya
	Secara default, kata kunci var untuk properties adalah sifatnya public.
Access Level
	public Class(y) | Subclass(y) | World(y)
	protected Class(y) | Subclass(y) | World(x)
	private Class(y) | Subclass(x) | World(x)
	
Function Overriding
	Merupakan kemampuan mendeklarasikan ulang function di child class, yg sudah ada di parent class.
	Saat melakukan overriding, ketika kita membuat object dari class child, function yg ada di class parent tidak bisa diakses lagi
	
Parent Keyword
	Untuk mengakses function milik class parent, kita bisa menggunakan kata kunci parent
	Sederhananya, parent berfungsi untuk mengakses class parent