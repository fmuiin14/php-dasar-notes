Eko Kurniawan Khennedy
Teknikal Arsitek di salah satu perusahaan terbesar di Indonesia
pengalaman >= 10tahun

Pengenalan OOP
	OOP merupakan sudut pandang bahasa pemrograman yg berkonsep objek
	Ada beberapa istilah yg perlu dimengerti, yaitu Objek dan Class
	
	Apa Itu Objek?
		Adalah data yg berisi field/properties/attributes dan method/function/behavior
		
	Apa Itu Class?
		Adalah blueprint, prototype atau cetakan untuk membuat Objek
		Berisikan deklarasi semua properties dan functions yg dimiliki oleh objek
		Setiap objek selalu dibuat dari class
		Sebuah class bisa membuat objek tanpa batas
	Dari class, baru bisa buat objek
	
	Class dan Object
		class Car, objeknya avanza, almaz, mobilio
		class person, objek eko, joko, budi
		
Class
	Untuk membuat class, kita bisa menggunakan kata kunci class
	Biasanya nama class adalah format CamelCase, dan tidak boleh spasi
	
Object
	Merupakan hasil instansiasi dari class
	Untuk membuat object, kita bisa menggunakan kata kunci new, dan diikuti dengan nama Class dan ()
	
Properties
	Fields/ Properties/ Attributes adalah data yg bisa kita sisipkan di dalam Object
	Sebelum kita bisa memasukkan data di fields, kita harus mendeklarasikan data apa aja yg dimiliki objek tsb didalam deklarasi classnya
	Membuat field sama seperti membuat variable, namun ditempatkan di block class, dan diawali dengan kata kunci var
	
	Manipulasi Properties
		Field yg ada di objek bisa kita manipulasi
		Untuk mengakses field, kita perlu kata kunci -> setelah nama object dan diikuti nama fieldsnya.
		
	Properties Type Declaration
		Sama seperti di function, kita juga bisa membuat type declaration di properties
		Ini membuat PHP otomatis cek tipe data yg sesuai dengan type declaration yg telah ditentukan
		Jika kita mencoba mengubah properties dengan type yg berbeda, maka otomatis akan error. Dan PHP memiliki fitur Type Juggling,
		secara otomatis bisa konversi tipe data lain
		Untuk menambahkan type declaration, kita bisa tambahkan setelah kata kunci var di properties
		
	Default Properties Value
		Ini mirip seperti default value, jadi jika tidak diubah di objek, maka properties akan memiliki value tsb
		
	Nullable Properties
		Saat kita menambah type declaration di properties atau di function argument, maka secara otomatis kita tidak bisa mengirim data
		null ke dalam properties atau function argument tsb.
		Di PHP 7.4 dikenalkan nullable type, jadi kita bisa mengirim data null ke properties/ function arguments
		Caranya sebelum type declaration kita bisa tambahkan tanda ?
		
Function
	Selain menambahkan properties, kita juga bisa menambahkan function ke object
	Caranya dengan mendeklarasikan function tsb di dalam block class
	Sama seperti function biasanya, kita juga bisa menambahkan return value dan parameter
	Untuk mengakses function tsb, kita bisa menggunakan -> dan diikuti dengan nama methodnya. Sama seperti akses properties
	
This Keyword
	Saat kita membuat kode di dalam function di dalam class, kita bisa menggunakan kata kunci this untuk mengakses object saat ini
	Misal kadang kita butuh mengakses properties atau function lain di class yg sama
	
Constant
	Properties di class bisa diubah, mirip variable
	di Class, kita juga bisa membuat Constant, data yg tidak bisa diubah
	Sejak php7.4 kita bisa menggunakan kata kunci const untuk membuat constant, mirip seperti variable namun tidak mengunakan $
	Mengakses CONSTANT
		require_once, lalu panggil NamaClass::NAMAKONSTANT
		
Self Keyword
	Properties vs Constant
		-Saat kita membuat object, properties yg terdapat di class akan secara otomatis dibuat per object. 
		maka untuk mengakses properties, kita perlu menggunakan object, atau jika dari dalam object tersebut, kita perlu menggunakan
		kata kunci this
		-Berbeda, constant di class tidak akan dibuat per object. Constant itu hidupnya di class, bukan di object. jadi perlu akses
			NamaClass::NAMA_CONSTANT
		-Secara sederhana, properties akan dibuat satu per instance class (object), sedangkan constant dibuat satu per class
		
	Self Keyword
		-Jika di dalam class (misal di function) kita ingin mengakses constant, kita perlu mengakses menggunakan NamaClass::NAMA_CONSTANT
		-Namun jika di dalam class yg sama, kita bisa menggunakan kata kunci self untuk mempermudah
	This untuk mengakses object saat ini, kalo self untuk mengakses class saat ini
	
Constructor
	Saat kita membuat Object, maka kita seperti memanggil sebuah function, karena kita menggunakan kurung ()
	Di dalam class PHP, kita bisa membuat constructor, merupakan function yg akan dipanggil saat pertama kali Object dibuat
	Mirip seperti di function, kita bisa memberi parameter pada constructor
	Nama constructor di PHP haruslah __construct()
	Construct adalah function yg dipanggil ketika membuat object
	
Destructor
	Jika constructor adalah function yg akan dipanggil ketika object dibuat,
	Destructor merupakan function yg akan dipanggil ketika object dihapus dari memori
	Untuk membuatnya, kita bisa menggunakan __destruct()
	Khusus destructor, kita tidak boleh menambahkan function argument
	Dalam penggunaan sehari-hari, ini cocok untuk menutup koneksi ke database atau menutup proses menulis ke file, sehingga tidak terjadi
	memori leak
	
Inheritance
	Merupakan kemampuan untuk menurunkan sebuah class ke class lain, dengan artian kita bisa membuat class Parent dan Child
	Child hanya memiliki 1 parent, namun Parent bisa memiliki banyak Child
	Saat sebuah class diturunkan, maka semua properties dan function yg ada di class Parent secara otomatis akan dimiliki oleh class Child
	Untuk melakukan pewarisan, kita harus menggunakan kata kunci extends lalu diikuti dengan nama class parentnya
	
Namespace
	Saat membuat aplikasi, kita akan membuat banyak sekali class
	Jika terlalu banyak, kadang menyulitkan kita untuk mencari class
	PHP memiliki fitur namanya namespace, dimana kita bisa menyimpan class kita di dalam namespace
	Namespace bisa nested, dan jika kita ingin mengakses class yg ada di namespace, kita perlu menyebutkan nama namespacenya
	Namespace bagus ketika kita punya beberapa class yg sama, dengan menggunakan namespace nama class sama tidak akan membuat php error
Membuat namespace
	pakai kata kunci namespace, jika sub nemspace pakai \ setelah namespace sebelumnya
Function dan Constant di namespace
	Jika kita ingin menggunakan function atau constant tsb, kita bisa menggunakannya dengan diawali dengan nama namespace nya
Global namespace
	Secara default, saat kita membuat kode PHP, maka akan disimpan di Global namespace.
	Ini adalah namespace yg tidak memiliki nama namespace
	
Import
	use Keyboard
		Untuk menggunakan class, function atau constant di namespace, kita perlu menyebutkan nama namespacenya di awal
		jika terlalu sering menggunakan class, maka akan terlalu banyak duplikasi dengan menyebut namespace berkali-kali
		Hal ini bisa kita hindari dengan cara mengimport class, function, atau constant tsb dengan menggunakan kata kunci use
		
	Alias
		Saat kita menggunakan use, artinya kita tidak lagi perlu menggunakan nama namespace diawal class ketika kita membuat class tsb
		Jika kita ingin membuat nama classnya sama, maka bisa menggunakan alias
		Alias adalah kemampuan membuat nama lain dari class, function, atau constant yg ada.
		Kita bisa menggunakan kata kunci as setelah melakukan use
		
	Group use Declaration
		Kita bisa mengimport beberapa class, function atau constant dalam satu perintah use
		Untuk melakukan itu, kita perlu {}
		
Visibility
	Atau Mofifier adalah kemampuan properties, function dan construct dapat diakses dari mana saja
	Secara default, properties, function dan constant yg kita buat di dalam class bisa diakses dr mana saja, atau artinya dia public
	Selain public, masih ada visibility lainnya
	Secara default, kata kunci var untuk properties adalah sifatnya public.
Access Level
	public Class(y) | Subclass(y) | World(y)
	protected Class(y) | Subclass(y) | World(x)
	private Class(y) | Subclass(x) | World(x)
	
Function Overriding
	Merupakan kemampuan mendeklarasikan ulang function di child class, yg sudah ada di parent class.
	Saat melakukan overriding, ketika kita membuat object dari class child, function yg ada di class parent tidak bisa diakses lagi
	
Parent Keyword
	Untuk mengakses function milik class parent, kita bisa menggunakan kata kunci parent
	Sederhananya, parent berfungsi untuk mengakses class parent
	
Constructor Overriding
	Karena constructor sama seperti function, maka constructor bisa di deklarasikan ulang di class Child nya
	Di PHP kita bisa meng override function dengan arguments yg berbeda, namun sangat tidak disarankan
	Jika kita meng override function dengan arguments yg berbeda, maka PHP akan menampilkan WARNING
	Namun berbeda dengan constructor overriding, kita boleh meng override dengan mengubah arguments nya, namun direkomendasikan untuk
	memanggil parent constructor.
	
Polimorfisme
	Berasal dari bahasa Yunani, artinya banyak bentuk
	Dalam OOP, maksudnya kemampuan object untuk berubah bentuk menjadi bentuk lain
	Polimorfisme erat kaitannya dengan Inheritance
	
Type Check and Casts
	Sebelumnya kita sudah tau cara melakukan konversi tipe data bukan class
	Khusus untuk tipe data object, kita tidak perlu melakukan konversi secara eksplisit
	Namun agar aman, sebelum melakukan casts, pastikan kita melakukan type check (pengecekan tipe data) dengan menggunakan
	kata kunci instanceof
	hasilnya adalah boolean, true jika tipe data sesuai, false jika tidak sesuai
	
Abstract Class
	Class bisa kita jadikan sebagai abstract class
	Artinya class tsb tidak bisa dijadikan object secara langsung, hanya bisa diturunkan
	Untuk membuatnya kita bisa menggunakan kata kunci abstrak sebelum kata class
	Abstrak class bisa kita gunakan sebagai kontrak child class
	
Abstract Function
	Saat kita membuat abstract function, kita tidak boleh membuat block function untuk function tsb
	Artinya, abstract function wajib di override di class child
	Abstract function tidak boleh memiliki access modifier private
void artinya tidak mengembalikkan data

Getter and Setter
	Encapsulation
		Memastikan data sensitif sebuah object tersembunyi dari akses luar
		Bertujuan agar kita bisa menjaga supaya data sebuah object tetap valid dan baik
		Untuk membuat ini, kita membuat semua properties menggunakan access modifier private, sehingga tidak bisa diakses/diubah dr luar
		Agar bisa diubah, kita akan menyediakan function untuk mengubah dan mendapatkan properties tsb
	Getter
		function untuk mengambil data field
	Setter 
		function untuk mengubah data field
		
Interface
	Sebelumnya sudah tau bahwa abstract class bisa digunakan sebagai kotrak untuk class child nya
	Namun sebenarnya yg lebih tepat untuk kontrak adalah interface
	Interface mirip seperti abstract class, yg membedakan adalah di interface, semua method otomatis abstract tidak memiliki block
	Di interface, kita tidak boleh memiliki properties, kita hanya boleh memiliki constant
	Untuk mewariskan interface, kita tidak menggunakan kata kunci extends, tp implements
	Berbeda dengan class, kita bisa implements lebih dari satu interface
Interface Inheritance
	Di PHP, child class hanya bisa punya 1 class parent
	Berbeda dengan interface, sebuah child class bisa implements lebih dari 1 interface
	Bahkan interface pun bisa implement interface lain, bisa lebih dari 1. Namun jika interface ingin mewarisi interface lain,
	kita menggunakan kata kunci extends bukan implements
	
Trait
	Mirip dengan abstract class, kita bisa membuat konkrit function atau abstract function
	Yang membedakan, di trait kita bisa menambahkan ke dalam class lebih dari satu trait
	Trait mirip seperti ekstension, dimana kita bisa menambahkan konkrit funciton ke dalam class dengan trait
	Secara sederhana, trait digunakan untuk menyimpan function2 yg bisa digunakan ulang di beberapa class
	Untuk menggunakannya kita bisa menggunakan use
Trait Properties
	Berbeda dengan interface, di trait kita bisa menambahkan properties
	Dengan menambah properties, secara otomatis class tsb akan memiliki properties yg ada di trait
	
Trait Overriding
	Trait Abstract Function
		Selain konkrit function, di trait kita juga bisa menambahkan abstract function
		Jika terdapat abstract function di trait, maka secara otomatis function tsb harus di override di class yg menggunakan trait tsb
Trait Overriding
	Jika sebuah class memiliki parent class yg memiliki function yg sama dengan function di trait, maka secara otomatis trait akan
	meng override function tsb
	Namun jika kita membuat function yg sama di classnya, maka secara otomatis kita akan meng override function di trait
	Sehingga posisinya: ParentClass = override by => Trait = override by => ChildClass
Trait Visibility Override
	Selain menggunakan override function, kita juga bisa override visibility function yg terdapat di trait. 
	Namun untuk melakukan ini tidak perlu membuat function baru di class, kita bisa gunakan secara sederhana ketika menggunakan traitnya
	
Trait Conflict
	Jika kita menggunakan lebih dari satu trait, lalu terdapat function yg sama di trait tersebut, maka akan terjadi conflict
	Jika terjadi conflict, kita bisa mengatasinya dengan menggunakan kata kunci insteadof
	
Trait Inheritance
	Class bisa menggunakan trait lebih dari satu
	bagaimana dengan trait yg menggunakan trait lain?
	Bisa, mirip seperti interface yg bisa implement interface lain
	Untuk menggunakan trait lain dari trait, penggunaannya sama seperti dengan penggunakan trait di class
	
Final Class
	kata kunci final bisa digunakan di class, dimana jika kita menggunakan kata kunci final sebelum class, maka kita menandakan bahwa
	class tersebut tidak bisa diwariskan lagi
	Secara otomatis semua class child nya akan error
	
Final Function
	Jika sebuah function ditambahkan kata kunci final, maka function tsb tidak bisa di override lagi di class child nya
	Ini sangat cocok jika kita ingin mengunci implementasi dari sebuah method agar tidak bisa diubah lagi oleh class childnya
	
Anonymous Class
	Merupakan class tanpa nama, kemampuan mendeklarasikan class, sekaligus instansiasi object nya secara langsung
	Sangat cocok ketika berhadapan dengan kasus membuat implementasi interface atau abstract class sederhana, tanpa harus membuat
	implementasi classnya
BIKIN OBJECT ITU DARI CLASS

Constructor di Anonymous Class
	Bisa juga constructor, kita bisa menambahkan kalau mau
	
Static Keyword
	Merupakan keyword yg bisa kita gunakan untuk membuat properties atau function di class, bisa diakses secara langsung tanpa
	menginstansiasi class terlebih dahulu
	Saat kita buat static properties/ function, secara otomatis hal itu tidak akan berhubungan lagi dengan class instance yg kita buat.
	Untuk cara mengakses static properties dan function sama seperti mengakses constant, kita bisa menggunakan operator ::
	Static function tidak bisa mengakses function biasa, karena function biasa menempel pada class instance, sedangkan static function tidak
	
stdClass
	Merupakan class kosong bawaan dari PHP, biasanya digunakan ketika ingin konversi tipe data lain menjadi Object
	Sangat berguna ketika misal ingin melakukan konversi dari tipe data array ke object secara otomatis
	
Object Iteration
	Saat kita membuat object dari class, kita bisa melakukan iterasi ke semua properties yg terdapat di object tersebut dengan foreach
	Hal ini mempermudah kita saat ingin mengakses semua properties yg ada di object
	Secara default, hanya properties yg public yg bisa diakses oleh foreach
	
Iterator
	Sebelumnya kita melakukan iterasi data di properties secara otomatis menggunakan foreach
	Jika kita ingin menangani hal ini secara manual, bisa menggunakan iterator
	Adalah interface yg digunakan untuk melakukan iterasi, namun membuat secara manual cukup ribet, jadi kita akan gunakan
	ArrayIterator, yaitu iterator yg menggunakan array sebagai data iterasinya
	Agar class kita bisa di iterasi secara manual, kita bisa menggunakan interface IteratorAggregate, disana kita hanya butuh 
	meng-Override function getIterator() yg mengembalikkan data Iterator
	
Generator
	Untuk membuat object yg bisa di iterasi, kita menggunakan iterator. Pembuatan iterator manual sangatlah ribet.
	Di PHP ada fitur Generator, bisa kita gunakan untuk membuat iterator secara otomatis hanya dengan menggunakan kata yield
	
Object Cloning
	Bisa menggunakan perintah clone untuk membuat duplikasi object.
	Secara otomatis semua properties di object awal akan di duplikasi ke object baru
__clone() Function
	Misal kita ingin menyalin beberapa properties saja, Jika ingin memodifikasi PHP dalam melakukan clone, kita bisa membuat function
	di dalam classnya dengan nama function __clone()
	Function __clone akan dipanggil di object hasil duplikasi setelah proses duplikasi selesai
	Jika kita ingin menghapus beberapa properti, bisa lakukan di function __clone()
	
Comparing Object
	Untuk membandingkan 2 buah objek, sama seperti yg lain bisa menggunakan == (equals) dan === (identity)
	== membandingkan semua properties yg terdapat di object tersebut, dan tiap properties juga akan dibandingkan menggunakan ==
	=== membandingkan apakah object identik, artinya mengacu pd object yg sama
	
Magic Function
	Merupakan function yg sudah ditentukan kegunaannya di PHP
	Contohnya __construct, __destruct(), __clone()

__toString() Function
	Membuat string dari object
	
__invoke() Function
	Function yg di eksekusi ketika object yg kita buat dianggap sebagai function
	Misal membuat object $student, lalu melakukan $student(), maka secara otomatis __invoke() akan di eksekusi
	
__debugInfo() Function
	debug variabel menggunakan function var_dump
	sebenarnya, ini memanggil function __debugInfo()
	Jika kita ingin mengubah isi dari debugInfo, kita bisa menggunakan function __debugInfo()
DAN MASIH BANYAK LAGEEE

Overloading
	Merupakan kemampuan secara dinamis membuat properties/ function
	Mirip meta programming kalau di bahasa pemrograman Ruby
	Di Java, overloading maksudnya membuat function dengan nama sama
	Erat kaitannya dengan magic function

Properties Overloading
	Saat kita mengakses properties, maka otomatis properties akan diakses
	Jika ternyata properties tsb tidak tersedia di objectnya, maka PHP tidak secara otomatis menjadikan error
	PHP akan melakukan fallback ke magic function
	Dengan demikian, kita bisa membuat properties secara dinamis dengan memanfaatkan magic function tsb
	Ada beberapa magic function yg bisa kita gunakan untuk properties overloading

Magic Function untuk Properies Overriding
	__set($name, $value): void //dieksekusi ketika mengubah properties yg tidak tersedia
		Mengubah data berdasarkan properti namenya
	__get($name): mixed //dieksekusi ketika mengakses properties yg tidak tersedia
		Mengambil data berdasarkan properti namenya
	__isset($name): bool //dieksekusi ketika cek isset() atau empty() properties yg tidak tersedia
		Mengecek apakah sudah di set berdasarkan properti namenya
	__unset($name): void //dieksekusi ketika menggunakan unset() properties yg tidak tersedia
		Untuk unset berdasarkan properti namenya
		
Function Overloading
	Jika function yg diakses tidak tersedia di objectnya, maka PHP tidak secara otomatis menjadikan itu error
	PHP akan fallback ke magic function
	Denga demikian, kita bisa membuat function secara dinamis dengan memanfaatkan magic function tsb
	
Magic Function untuk Function Overloading
	_call($name, $arguments): mixed //dieksekusi ketika memanggil function yg tidak tersedia
	static __callStatic($name, $arguments): mixed //dieksekusi ketika memanggil static function yg tidak tersedia